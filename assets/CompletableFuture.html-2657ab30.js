import{_ as n,o as s,c as a,a as e}from"./app-a6bbcd8f.js";const t={},p=e(`<p>多线程编程工具，它实现了Future接口，并在此基础上进行了扩展，增加了任务编排的能力。</p><h2 id="核心的四个静态方法" tabindex="-1"><a class="header-anchor" href="#核心的四个静态方法" aria-hidden="true">#</a> 核心的四个静态方法</h2><p>CompletableFuture的构造方法是不完备的，所以不推荐直接使用构造方法</p><h3 id="runasync" tabindex="-1"><a class="header-anchor" href="#runasync" aria-hidden="true">#</a> runAsync</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 没有指定Executor的方法，会默认使用ForkJoinPool.commonPool()作为默认线程池</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="supplyasync" tabindex="-1"><a class="header-anchor" href="#supplyasync" aria-hidden="true">#</a> supplyAsync</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="completablefuture常用api" tabindex="-1"><a class="header-anchor" href="#completablefuture常用api" aria-hidden="true">#</a> CompletableFuture常用API</h2><h3 id="获取结果触发计算" tabindex="-1"><a class="header-anchor" href="#获取结果触发计算" aria-hidden="true">#</a> 获取结果触发计算</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取结果：</span>
<span class="token comment">//  阻塞获取</span>
<span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//  阻塞获取，超过设定时间报异常</span>
<span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>
<span class="token comment">//  可不抛异常</span>
<span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//  马上取值，若没计算完，则给一个代替的结果(valueIfAbsent)</span>
<span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getNow</span><span class="token punctuation">(</span><span class="token class-name">T</span> valueIfAbsent<span class="token punctuation">)</span>
<span class="token comment">// 主动触发计算：</span>
<span class="token comment">//  打断get/join方法立即返回括号值</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">complete</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对计算结果进行处理" tabindex="-1"><a class="header-anchor" href="#对计算结果进行处理" aria-hidden="true">#</a> 对计算结果进行处理</h3><ul><li>thenApply，计算结果存在依赖关系，这两线程串行化处理，出现异常不会继续往下执行</li><li>handle，出现异常还能继续往下执行</li></ul><h3 id="对计算结果进行消费" tabindex="-1"><a class="header-anchor" href="#对计算结果进行消费" aria-hidden="true">#</a> 对计算结果进行消费</h3><ul><li>thenRun，A执行完执行B，且B不需要A的返回值</li><li>thenAccept，A执行完执行B，B需要A的返回值，但B没有返回值</li><li>thenApply，A执行完执行B，B需要A的返回值，B有返回值</li></ul><h3 id="对计算速度进行选用" tabindex="-1"><a class="header-anchor" href="#对计算速度进行选用" aria-hidden="true">#</a> 对计算速度进行选用</h3><ul><li>applyToEither，对用两个线程计算速度的选用，谁快用谁</li></ul><h3 id="对计算结果进行合并" tabindex="-1"><a class="header-anchor" href="#对计算结果进行合并" aria-hidden="true">#</a> 对计算结果进行合并</h3><ul><li>thenCombine，两个CompletionStage任务都完成后，最终能把两个任务的结果一起交给thenCombine来处理，先完成的会等待</li></ul>`,18),c=[p];function l(o,i){return s(),a("div",null,c)}const r=n(t,[["render",l],["__file","CompletableFuture.html.vue"]]);export{r as default};
