import{_ as e,o as r,c as i,b as a,a as t}from"./app-a6bbcd8f.js";const s={},o=a("div",{class:"custom-container tip"},[a("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[a("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[a("circle",{cx:"12",cy:"12",r:"9"}),a("path",{d:"M12 8h.01"}),a("path",{d:"M11 12h1v4h1"})])]),a("p",{class:"custom-container-title"},"加载器自上而下"),a("p",null,"根加载器 > 扩展加载器 > 系统加载器/应用加载器 > 用户自定义加载器")],-1),d=t('<h2 id="加载器" tabindex="-1"><a class="header-anchor" href="#加载器" aria-hidden="true">#</a> 加载器</h2><p>JVM自带的加载器(JVM内部所包含的)、用户自定义加载器(独立于JVM之外的加载器)</p><h3 id="根加载器" tabindex="-1"><a class="header-anchor" href="#根加载器" aria-hidden="true">#</a> 根加载器</h3><p>BootStrap，负责加载<code>java.lang.*</code></p><ul><li>包含大部分平时编写代码的JDK API</li><li>指定加载某个jar【-Xbootclasspath=x.jar】</li></ul><h3 id="扩展加载器" tabindex="-1"><a class="header-anchor" href="#扩展加载器" aria-hidden="true">#</a> 扩展加载器</h3><p>Extension，负责加载<code>javax.*</code></p><ul><li>指定加载某个jar【-Djava.ext.dirs=x.jar】</li></ul><h3 id="系统加载器-应用加载器" tabindex="-1"><a class="header-anchor" href="#系统加载器-应用加载器" aria-hidden="true">#</a> 系统加载器/应用加载器</h3><p>SystemClassLoader/AppClassLoader，负责加载classpath</p><ul><li>指定加载某个jar【-Djava.class.path=类|jar】</li></ul><h3 id="用户自定义加载器" tabindex="-1"><a class="header-anchor" href="#用户自定义加载器" aria-hidden="true">#</a> 用户自定义加载器</h3><p>继承自Java.lang.ClassLoader的子类</p><h2 id="双亲委派" tabindex="-1"><a class="header-anchor" href="#双亲委派" aria-hidden="true">#</a> 双亲委派</h2><p>加载器在加载一个类时，自己先不加载而是逐层交由双亲加载；当某个双亲加载器加载成功之后再向下返回成功。 所有的双亲和自己都无法加载，就报无法加载的异常。<code>保障类的唯一性和安全性</code></p>',15),l=[o,d];function h(n,c){return r(),i("div",null,l)}const u=e(s,[["render",h],["__file","leijiazaiqi.html.vue"]]);export{u as default};
