import{_ as a,o as e,c as n,a as o}from"./app-a6bbcd8f.js";const i={},t=o('<p>空值（null）检测容器，对对象进行Optional封装，处理空值减少空指针异常。</p><h2 id="常用api" tabindex="-1"><a class="header-anchor" href="#常用api" aria-hidden="true">#</a> 常用API</h2><h3 id="optional-of" tabindex="-1"><a class="header-anchor" href="#optional-of" aria-hidden="true">#</a> Optional.of</h3><p>用于创建一个包含非空值的Optional对象。如果传入的参数为null，则会抛出NullPointerException异常。</p><h3 id="optional-ofnullable" tabindex="-1"><a class="header-anchor" href="#optional-ofnullable" aria-hidden="true">#</a> Optional.ofNullable</h3><p>用于创建一个Optional对象，该对象可以包含一个非空值或者null。 如果传入的参数不为null，则Optional对象会包含该参数的值；如果传入的参数为null，则Optional对象为空。</p><h3 id="optional-empty" tabindex="-1"><a class="header-anchor" href="#optional-empty" aria-hidden="true">#</a> Optional.empty</h3><p>用于创建一个空的Optional对象。</p><h3 id="optional-ispresent" tabindex="-1"><a class="header-anchor" href="#optional-ispresent" aria-hidden="true">#</a> Optional.isPresent</h3><p>用于判断Optional对象是否包含非空值。</p><h3 id="optional-orelse" tabindex="-1"><a class="header-anchor" href="#optional-orelse" aria-hidden="true">#</a> Optional.orElse</h3><p>用于获取Optional对象中的值，如果该对象为空，则返回指定的默认值。</p><h3 id="optional-get" tabindex="-1"><a class="header-anchor" href="#optional-get" aria-hidden="true">#</a> Optional.get</h3><p>用于获取Optional对象中的值。</p><h3 id="optional-map" tabindex="-1"><a class="header-anchor" href="#optional-map" aria-hidden="true">#</a> Optional.map</h3><p>用于对Optional对象中的值进行映射操作。</p>',16),l=[t];function p(r,h){return e(),n("div",null,l)}const s=a(i,[["render",p],["__file","Optional.html.vue"]]);export{s as default};
