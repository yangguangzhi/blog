import{_ as e,o as a,c as r,a as i}from"./app-a6bbcd8f.js";const n={},t=i('<h2 id="bean处理" tabindex="-1"><a class="header-anchor" href="#bean处理" aria-hidden="true">#</a> Bean处理</h2><h3 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> @Configuration</h3><p>声明配置类注解。通过动态代理生成配置类，方法之间的调用可适用单例Bean机制，一般搭配@Bean使用。</p><h3 id="bean" tabindex="-1"><a class="header-anchor" href="#bean" aria-hidden="true">#</a> @Bean</h3><p>声明Bean对象注解。方法级别注解，根据方法返回值往容器中添加Bean对象。</p><h3 id="scope" tabindex="-1"><a class="header-anchor" href="#scope" aria-hidden="true">#</a> @Scope</h3><p>Bean对象作用域，Bean对象的生效范围</p><ul><li>singleton，单例bean，Spring中的bean对象默认都是单例</li><li>prototype，原型bean，每次请求都会创建一个新的bean实例</li><li>request，每一次http请求都会产生一个新的bean，该bean仅在当前的HTTP request内有效</li><li>session，每一次http会话都会产生一个新的bean，该bean仅在当前的HTTP session内有效</li></ul><h3 id="component" tabindex="-1"><a class="header-anchor" href="#component" aria-hidden="true">#</a> @Component</h3><p>声明Bean对象注解，功能性的Bean对象</p><h3 id="controller" tabindex="-1"><a class="header-anchor" href="#controller" aria-hidden="true">#</a> @Controller</h3><p>MVC控制层，通常搭配@RequestMapping一起使用，用于接收处理Api请求</p><h3 id="restcontroller" tabindex="-1"><a class="header-anchor" href="#restcontroller" aria-hidden="true">#</a> @RestController</h3><p>同@Controller，是@Controller和@ResponseBody的复合注解，用于处理Restful服务</p><h3 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> @Service</h3><p>用于服务处理层声明Bean对象</p><h3 id="repository" tabindex="-1"><a class="header-anchor" href="#repository" aria-hidden="true">#</a> @Repository</h3><p>用于数据访问层声明Bean对象</p><h3 id="autowired" tabindex="-1"><a class="header-anchor" href="#autowired" aria-hidden="true">#</a> @Autowired</h3><p>属性注入，可用于属性和方法注入对象</p><h3 id="resource" tabindex="-1"><a class="header-anchor" href="#resource" aria-hidden="true">#</a> @Resource</h3><p>属性注入，注入对象</p><h3 id="qualifier" tabindex="-1"><a class="header-anchor" href="#qualifier" aria-hidden="true">#</a> @Qualifier</h3><p>注入的时候不再使用变量名作为ByName参数查询容器，而是使用@Qualifier声明的对象名查询容器</p><h3 id="requiredargsconstructor" tabindex="-1"><a class="header-anchor" href="#requiredargsconstructor" aria-hidden="true">#</a> @RequiredArgsConstructor</h3><p>Lombok的注解，根据final修饰的成员变量集，生成一个有参构造，Spring在生成Bean对象时，就会根据构造器注入</p><h2 id="http请求处理" tabindex="-1"><a class="header-anchor" href="#http请求处理" aria-hidden="true">#</a> Http请求处理</h2><h3 id="requestmapping" tabindex="-1"><a class="header-anchor" href="#requestmapping" aria-hidden="true">#</a> @RequestMapping</h3><p>Http请求的URI映射标识，包括URI Path和Method等</p><h3 id="getmapping" tabindex="-1"><a class="header-anchor" href="#getmapping" aria-hidden="true">#</a> @GetMapping</h3><p>获取服务器资源，等价于@RequestMapping(value=&quot;/&quot;, method=RequestMethod.GET)</p><h3 id="postmapping" tabindex="-1"><a class="header-anchor" href="#postmapping" aria-hidden="true">#</a> @PostMapping</h3><p>上传资源到服务器，等价于@RequestMapping(value=&quot;/&quot;, method=RequestMethod.POST)</p><h3 id="putmapping" tabindex="-1"><a class="header-anchor" href="#putmapping" aria-hidden="true">#</a> @PutMapping</h3><p>修改服务器资源，等价于@RequestMapping(value=&quot;/&quot;, method=RequestMethod.PUT)</p><h3 id="deletemapping" tabindex="-1"><a class="header-anchor" href="#deletemapping" aria-hidden="true">#</a> @DeleteMapping</h3><p>删除服务器资源，等价于@RequestMapping(value=&quot;/&quot;, method=RequestMethod.DELETE)</p><h3 id="参数接收" tabindex="-1"><a class="header-anchor" href="#参数接收" aria-hidden="true">#</a> 参数接收</h3><h4 id="requestparam" tabindex="-1"><a class="header-anchor" href="#requestparam" aria-hidden="true">#</a> @RequestParam</h4><p>用于接收URL上的表单数据</p><h4 id="pathvariable" tabindex="-1"><a class="header-anchor" href="#pathvariable" aria-hidden="true">#</a> @PathVariable</h4><p>用于接收URL路径参数</p><h4 id="requestbody" tabindex="-1"><a class="header-anchor" href="#requestbody" aria-hidden="true">#</a> @RequestBody</h4><p>用于接收请求体封装数据</p><h2 id="conditional" tabindex="-1"><a class="header-anchor" href="#conditional" aria-hidden="true">#</a> Conditional</h2><h3 id="conditionalonproperty" tabindex="-1"><a class="header-anchor" href="#conditionalonproperty" aria-hidden="true">#</a> ConditionalOnProperty</h3><p>在定义了xx属性的时候加载Bean</p>',47),h=[t];function d(o,p){return a(),r("div",null,h)}const c=e(n,[["render",d],["__file","changyongzhujie.html.vue"]]);export{c as default};
