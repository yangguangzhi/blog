import{_ as e,o as a,c as i,a as l}from"./app-a6bbcd8f.js";const r={},t=l('<h2 id="按锁粒度分类" tabindex="-1"><a class="header-anchor" href="#按锁粒度分类" aria-hidden="true">#</a> 按锁粒度分类</h2><ul><li>行锁，锁住某些行的数据，粒度小并发度高</li><li>间隙锁，锁住一个区间的数据</li><li>表锁，锁住整张表，粒度大并发度低</li></ul><h2 id="读锁、写锁" tabindex="-1"><a class="header-anchor" href="#读锁、写锁" aria-hidden="true">#</a> 读锁、写锁</h2><ul><li>共享锁（读锁），一个事务给某行数据加了读锁，其他事务也能读，但是不能写</li><li>排它锁（写锁），一个事务给某行数据加了读锁，其他事务不能读也不能写</li></ul><h2 id="乐观锁、悲观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁、悲观锁" aria-hidden="true">#</a> 乐观锁、悲观锁</h2><ul><li>乐观锁，并不会真正去锁某行数据，而是通过一个版本号实现</li><li>悲观锁，行锁、表锁都是悲观锁</li></ul><h2 id="sql中用到的锁" tabindex="-1"><a class="header-anchor" href="#sql中用到的锁" aria-hidden="true">#</a> SQL中用到的锁</h2><h3 id="update、insert、delete" tabindex="-1"><a class="header-anchor" href="#update、insert、delete" aria-hidden="true">#</a> update、insert、delete</h3><ol><li>会对选中的行加排他锁</li><li>where条件有可用的索引，会加行锁，锁住符合条件的行</li><li>where条件没有可用的索引，会加表锁，锁住整张表</li></ol><h3 id="select-for-update" tabindex="-1"><a class="header-anchor" href="#select-for-update" aria-hidden="true">#</a> select for update</h3><p>是实现行锁的一种语法，先获取表级共享锁，再根据where条件锁住符合条件的行</p>',11),d=[t];function h(s,n){return a(),i("div",null,d)}const o=e(r,[["render",h],["__file","MySQLsuo.html.vue"]]);export{o as default};
